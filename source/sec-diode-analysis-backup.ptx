<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-diode-circuit-analytic" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Analysis of diode circuits</title>

    <subsection xml:id="sub-analytic-analysis">
        <title>Analytic circuit treatment</title>
    <p>
        How do we analyze circuits containing diodes? The simplest way is to use the cartoonish behavior demonstrated in <xref ref="fig-diode-cartoon"/>. Given this diode behavior, one can occasionally determine by inspection the conditions under which the diode is on or off.For example, let's analyze the circuit in <xref ref="fig-diode-simple-example"/>.
        <figure xml:id="fig-diode-simple-example">
            <image width="50%">
                <shortdescription></shortdescription>
                <latex-image>
                    <xi:include parse="text" href="./figures/fig-diode-simple-example.ptx" />
                </latex-image>
            </image>
        </figure>
        In this circuit, 
        <md>
            <mrow>\tilde{V}_\text{out} \amp =\tilde{V}_\text{in}-V_F \amp \text{(Diode on)} </mrow>
            <mrow> \tilde{V}_\text{out} \amp = 0 \amp \text{(Diode off)} </mrow>
        </md>
        which is plotted in <xref ref="fig-diode-simple-example-plot"/>.
        
        <figure xml:id="fig-diode-simple-example-plot"> 
            <image width="75%">
                <shortdescription></shortdescription>
                <sageplot>
                import numpy as np
                import matplotlib.pyplot as plt

                R = 1e4; #in ohms
                VF = 0.6; #in volts
                
                t = np.linspace(0,1,500);
                Vin = 5*np.sin(20*t);
                Vout = np.zeros(np.size(t));
                Varr = np.zeros(np.size(t));

                Vout = Vin - VF;
                Vout[np.less(Vout,0)] = 0; # Use np.less since the less than symbol is a PreTeXt escape character
                Varr = Vin - Vout;

                p = list_plot(list(zip(t,Vin)),axes=false, axes_labels=['Time (s)','Voltage (V)'], frame=True, plotjoined=True, legend_label='$V_{in}$', color='blue',thickness=2)
                p += list_plot(list(zip(t,Vout)),legend_label='$V_{out}$',plotjoined=True,color='red', linestyle='-.',thickness=2)
                p += list_plot(list(zip(t,Varr)),legend_label='$V_D$', plotjoined=True, color='black', linestyle='--',thickness=2)
                p.set_legend_options(font_size=16, handlelength=3.0)
                p
                </sageplot>   
            </image>
        </figure>      
    </p>        
    <p>
        With experience, the approach above may eventually be enough for you to solve some relatively simple diode circuits. When one is first learning to analyze diode circuits, or when analyzing more complicated circuits, the above method may not work. In such a case, one continues to use the cartoon diode behavior and guesses at whether each diode is off or on for a given instantaneous value of the input voltage. The remaining circuit elements are then analyzed under the assumption that the initial guesses are correct. In order to determine the veracity of the initial guesses, one looks for inconsistencies or impossibilities that arise from the rest of the circuit analysis. If an impossible situation occurs, then one knows that the initial assumptions were incorrect. In this scenario, one adjusts the initial guesses and re-analyzes the circuit, repeating until no inconsistencies occur. Stated differently, the steps to follow are:
        <ol>
            <li>
                <p>
                    Check the conditions in the circuit and see if it is possible to achieve a forward voltage drop <m>V_F</m> across the diode. If it is completely impossible, then the diode will be off and you can treat it as a circuit break. If it is possible that the diode may be forward biased, then continue on to the next steps.
                </p>
            </li>
            <li>
                <p>
                    For each diode in your circuit, guess whether the diode is on or off. For each diode that is on, let the voltage drop <m>\left(\Delta V\right)_D=V_F</m> be locked. For each diode that is off, treat the diode as a circuit break meaning no current can pass through it.
                </p>
            </li>
            <li>
                <p>
                    Analyze the rest of the circuit elements and search for inconsistencies. 
                </p>
            </li>
            <li>
                <p>
                    If any results of your analysis conflict with your guesses about diodes that are on/off, then go back and change your guesses until there are no inconsistencies.
                </p>
            </li>
        </ol>
        Let's use this procedure for <xref ref="fig-diode-simple-example"/>. If we assume that the diode is on when <m>\tilde{V}_\text{in}=-1.0</m>V, then <m>\tilde{V}_\text{out}=-0.4</m>V. But, this would require a current directed counterclockwise around the circuit which is not allowed by the diode. This inconsistency indicates that our assumption about the diode being on is incorrect in this case. If we change our assumption and instead state that the diode is off when <m>\tilde{V}_\text{in}=-1.0</m>V, then <m>\tilde{V}_\text{out}=0</m>V since no current passes through the output resistor.
    </p>

    <example>
        <title>Diode example #2</title>
        <statement>
            <figure xml:id="fig-diode-example2">
                <caption>Diode example #2.</caption>
                <image width="30%"><latex-image>
                    <xi:include parse="text" href="./figures/fig-diode-example2-circuit.ptx" />
                </latex-image></image>
            </figure>
            <p>
                Find the voltage <m>V_B</m> in <xref ref="fig-diode-example2"/> assuming <m>V_F=0.6</m>V.
            </p>
                
        </statement>
        <answer>
            <me>V_B=0</me>
        </answer>
        <solution>
            <p>
                Let's examine this case-by-case.
                <ul>
                    <li>
                        <p>
                            Case 1: Both diodes are off. Then, <m>I_2=I_3=0</m> so that <m>I_1=0</m> as well. So, <m>V_A=+5</m>V. This is inconsistent with our assumption, since this results in a bias that is both large enough and in the correct direction to turn on diode <m>D2</m>. Thus, the assumptions in this case cannot be true.
                        </p>
                    </li>
                    <li>
                        <p>
                            Case 2: Both diodes are on. Then, <m>V_A=+0.6</m>V. Using Ohm's law, <m>I_1=0.88</m>mA. Also, we'd see that <m>V=0</m> due to the diode drop from point A to point B. Given this information, Ohm's law can again be applied to tell us that <m>I_3=0.5</m>mA. The KCL is then used to determine that <m>I_2=I_1-I_3=0.38</m>mA. There is no inconsistency here, meaning that we were correct in our assumptions and <m>V_B=0</m>. Though it is unnecessary (there can be only one correct answer!), we will examine the remaining cases.
                        </p>
                    </li>
                    <li>
                        <p>
                            Case 3: Diode 2 is off while diode 3 is on. In this case, our circuit acts as a voltage divider, with <m>10.0\text{V}-0.6\text{V}=9.4</m>V across the two resistors. So, <me>V_A=-5.0\text{V} + \frac{2}{3}(9.4\text{V}) + 0.6\text{V}=1.87\text{V}</me> which is more than enough to turn on diode two. Thus, this case cannot be valid.
                        </p>
                    </li>
                    <li>
                        <p>
                            Case 4: Diode 2 is on while diode 3 is off. In this case, <m>V_A=0.7</m>V. This is identical to <m>V_A</m> in case 2 meaning that diode 3 should activate. This conflicts with our assumption that diode 3 is off. Thus, this case cannot be valid.
                        </p>
                    </li>
                </ul>
            </p>
        </solution>
    </example>

    <example>
        <title>Diode example #3</title>
        <statement>
            <figure xml:id="fig-diode-example3">
                <caption>Diode example #3.</caption>
                <image width="30%"><latex-image>
                    <xi:include parse="text" href="./figures/fig-diode-example3-circuit.ptx" />
                </latex-image></image>
            </figure>
            <p>
                Find the voltage <m>V_B</m> in <xref ref="fig-diode-example3"/> assuming <m>V_F=0.6</m>V. Note that this is identical to the previous problem except that the two resistors have been swapped.
            </p>
                
        </statement>
        <answer>
            <me>V_B=-1.87\text{V}</me>
        </answer>
        <solution>
            <p>
                Let's examine this case-by-case.
                <ul>
                    <li>
                        <p>
                            Case 1: Both diodes are off. Then, <m>I_2=I_3=0</m> so that <m>I_1=0</m> as well. So, <m>V_A=+5</m>V. This is inconsistent with our assumption, since this results in a bias that is both large enough and in the correct direction to turn on diode <m>D2</m>. Thus, the assumptions in this case cannot be true.
                        </p>
                    </li>
                    <li>
                        <p>
                            Case 2: Both diodes are on. Then, <m>V_A=+0.6</m>V. Using Ohm's law, <m>I_1=0.44</m>mA. Also, we'd see that <m>V=0</m> due to the diode drop from point A to point B. Given this information, Ohm's law can again be applied to tell us that <m>I_3=1.0</m>mA. The KCL is then used to determine that <m>I_2=I_1-I_3=-0.56</m>mA. This is impossible since we've assumed ideal diodes which do not allow current to pass in the reverse direction.
                        </p>
                    </li>
                    <li>
                        <p>
                            Case 3: Diode 2 is off while diode 3 is on. In this case, our circuit acts as a voltage divider, with <m>10.0\text{V}-0.6\text{V}=9.4</m>V across the two resistors. So, <me>V_B=-5.0\text{V} + \frac{1}{3}(9.4\text{V}) + 0.6\text{V}=-1.87\text{V}</me> and <m>V_A = V_B + 0.6\text{V}=-1.27\text{V}</m> which would not turn on <m>D_2</m>. Thus, everything is consistent and this must be the valid scenario.
                        </p>
                    </li>
                    <li>
                        <p>
                            Case 4: Diode 2 is on while diode 3 is off. In this case, <m>V_A=0.7</m>V. This is identical to <m>V_A</m> in case 2 meaning that diode 3 should activate. This conflicts with our assumption that diode 3 is off. Thus, this case cannot be valid.
                        </p>
                    </li>
                </ul>
            </p>
        </solution>
    </example>
    </subsection>

    <subsection xml:id="sub-python-analysis">
        <title>Python circuit treatment</title>

        <p>
            Let's revisit the circuit in <xref ref="fig-diode-simple-example"/>. This time, we will use an improved mathematical representation of diode behavior from <xref ref="eqn-diode-exponential"/>, reproduced here as
            <me>
                I_D = I_0\left(e^{V_D/nV_T} - 1\right)
            </me>.
            Assuming we're using a silicon-based diode, we can assume <m>I_0\approx 3\times 10^{12}</m>A, <m>V_T = k_B T/e</m>, room temperature is <m>T\approx 293</m>K, and <m>n\approx 1</m>. The KVL can be used to write
            <me>
                \tilde{V}_\text{in} - V_D - I_0 R \left(e^{V_D/nV_T}-1\right)=0
            </me>.
            This is a nonlinear equation that cannot easily be solved analytically for <m>V_D</m>, so we'll use computational methods to estimate <m>V_D</m>. Specifically, we'll use Newton's Method which is described in <xref ref="app-python-newtonmethod"/>. In order to use this method, we'll let 
            <me>
                f(V_D) = \tilde{V}_\text{in} - V_D - I_0 R \left(e^{V_D/nV_T}-1\right)
            </me>
            and then calculate the first derivative
            <me>
                f'(V_D) = -1-\frac{I_0 R}{V_T} e^{V_D/V_T}
            </me>.
            Using these equations, we implement Newton's Method (<xref ref="app-python-newtonmethod"/>) using the following code:
            <sage language="python">
            <input>
                import numpy as np
                import scipy.constants as sc
                import matplotlib.pyplot as plt

                t = np.linspace(0,1,500);
                Vin_array = 5*np.sin(20*t);
                Vout = np.zeros(np.size(t));
                Varr = np.zeros(np.size(t));

                R, T, I0 = [1e4, 293, 3.0e-12] # in Ohms, Kelvin, Amps
                VT = sc.k * T / sc.e;

                target = 1.0e-8 # User-defined tolerance for final answer

                for i1 in range(np.size(t)):
                    Vin = Vin_array[i1]

                    # Initial guesses for the solution
                    V = 3.0

                    # Main loop
                    error = 1.0
                    while error > target:
                        f = Vin - V - I0*R*(np.exp(sc.e*V/(sc.k*T))-1);
                        fp = -1-I0*R*sc.e/(sc.k*T)*np.exp(sc.e*V/(sc.k*T))
                        DeltaV = f/fp
                        V -= DeltaV
                        error = DeltaV
                    Vout[i1]=Vin-V
                    Varr[i1]=V

                plt.figure(1)
                plt.plot(t,Vin_array, 'b', label='$V_{in}$')
                plt.plot(t,Vout,'r-.', label='$V_{out}$')
                plt.plot(t,Varr,'k--',label='$V_D$')
                plt.legend()
                plt.xlabel('Time (s)')
                plt.ylabel('Voltage (V)')
                plt.show()
            </input>
            <output>
            </output>
            </sage> 

            <image  width="75%">
                <shortdescription></shortdescription>
                <sageplot>
                import numpy as np
                import scipy.constants as sc
                import matplotlib.pyplot as plt

                t = np.linspace(0,1,500);
                Vin_array = 5*np.sin(20*t);
                Vout = np.zeros(np.size(t));
                Varr = np.zeros(np.size(t));

                R, T, I0 = [1e4, 293, 3.0e-12] # in Ohms, Kelvin, Amps
                VT = sc.k * T / sc.e;

                target = 1.0e-8 # User-defined tolerance for final answer

                for i1 in range(np.size(t)):
                    Vin = Vin_array[i1]

                    # Initial guesses for the solution
                    V = 3.0

                    # Main loop
                    error = 1.0
                    while error > target:
                        f = Vin - V - I0*R*(np.exp(sc.e*V/(sc.k*T))-1);
                        fp = -1-I0*R*sc.e/(sc.k*T)*np.exp(sc.e*V/(sc.k*T))
                        DeltaV = f/fp
                        V -= DeltaV
                        error = DeltaV
                    Vout[i1]=Vin-V
                    Varr[i1]=V

                p = list_plot(list(zip(t,Vin_array)),axes=false, axes_labels=['Time (s)','Voltage (V)'], frame=True, plotjoined=True, legend_label='$V_{in}$', color='blue',thickness=2)
                p += list_plot(list(zip(t,Vout)),legend_label='$V_{out}$',plotjoined=True,color='red', linestyle='-.',thickness=2)
                p += list_plot(list(zip(t,Varr)),legend_label='$V_D$', plotjoined=True, color='black', linestyle='--',thickness=2)
                p.set_legend_options(font_size=16, handlelength=3.0)
                p
            </sageplot> 
            </image>

            
            
            
            
            
        </p>
    
    </subsection>
</section>